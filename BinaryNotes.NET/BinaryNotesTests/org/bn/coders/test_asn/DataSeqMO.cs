
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace org.bn.coders.test_asn {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "DataSeqMO", IsSet = false  )]
    public class DataSeqMO : IASN1PreparedElement {
                    
	private TestPRN plain_ ;
	
        [ASN1Element ( Name = "plain", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public TestPRN Plain
        {
            get { return plain_; }
            set { plain_ = value;  }
        }
        
                
          
	private TestOCT unicode_ ;
	
        private bool  unicode_present = false ;
	
        [ASN1Element ( Name = "unicode", IsOptional =  true , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public TestOCT Unicode
        {
            get { return unicode_; }
            set { unicode_ = value; unicode_present = true;  }
        }
        
                
          
	private TestOCT binary_ ;
	
        private bool  binary_present = false ;
	
        [ASN1Element ( Name = "binary", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public TestOCT Binary
        {
            get { return binary_; }
            set { binary_ = value; binary_present = true;  }
        }
        
                
          
	private string simpleType_ ;
	
        private bool  simpleType_present = false ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.PrintableString , IsUCS = false )]
        [ASN1Element ( Name = "simpleType", IsOptional =  true , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public string SimpleType
        {
            get { return simpleType_; }
            set { simpleType_ = value; simpleType_present = true;  }
        }
        
                
          
	private byte[] simpleOctType_ ;
	[ASN1OctetString( Name = "" )]
    
        [ASN1Element ( Name = "simpleOctType", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public byte[] SimpleOctType
        {
            get { return simpleOctType_; }
            set { simpleOctType_ = value;  }
        }
        
                
          
	private bool booleanType_ ;
	
        private bool  booleanType_present = false ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "booleanType", IsOptional =  true , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public bool BooleanType
        {
            get { return booleanType_; }
            set { booleanType_ = value; booleanType_present = true;  }
        }
        
                
          
	private long intType_ ;
	
        private bool  intType_present = false ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "intType", IsOptional =  true , HasTag =  true, Tag = 6 , HasDefaultValue =  false )  ]
    
        public long IntType
        {
            get { return intType_; }
            set { intType_ = value; intType_present = true;  }
        }
        
                
          
	private int intBndType_ ;
	
        private bool  intBndType_present = false ;
	[ASN1Integer( Name = "" )]
    [ASN1ValueRangeConstraint ( 
		
		Min = 0L, 
		
		Max = 255L 
		
		) ]
	    
        [ASN1Element ( Name = "intBndType", IsOptional =  true , HasTag =  true, Tag = 7 , HasDefaultValue =  false )  ]
    
        public int IntBndType
        {
            get { return intBndType_; }
            set { intBndType_ = value; intBndType_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<string> stringArray_ ;
	
        private bool  stringArray_present = false ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.PrintableString , IsUCS = false )]
[ASN1SequenceOf( Name = "stringArray", IsSetOf = false  )]

    
        [ASN1Element ( Name = "stringArray", IsOptional =  true , HasTag =  true, Tag = 8 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<string> StringArray
        {
            get { return stringArray_; }
            set { stringArray_ = value; stringArray_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Data> dataArray_ ;
	
        private bool  dataArray_present = false ;
	
[ASN1SequenceOf( Name = "dataArray", IsSetOf = false  )]

    
        [ASN1Element ( Name = "dataArray", IsOptional =  true , HasTag =  true, Tag = 9 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Data> DataArray
        {
            get { return dataArray_; }
            set { dataArray_ = value; dataArray_present = true;  }
        }
        
                
          
	private TestPRN plain2_ ;
	
        private bool  plain2_present = false ;
	
        [ASN1Element ( Name = "plain2", IsOptional =  true , HasTag =  true, Tag = 10 , HasDefaultValue =  false )  ]
    
        public TestPRN Plain2
        {
            get { return plain2_; }
            set { plain2_ = value; plain2_present = true;  }
        }
        
                
          
	private TestOCT unicode2_ ;
	
        private bool  unicode2_present = false ;
	
        [ASN1Element ( Name = "unicode2", IsOptional =  true , HasTag =  true, Tag = 18 , HasDefaultValue =  false )  ]
    
        public TestOCT Unicode2
        {
            get { return unicode2_; }
            set { unicode2_ = value; unicode2_present = true;  }
        }
        
                
          
	private TestOCT binary2_ ;
	
        private bool  binary2_present = false ;
	
        [ASN1Element ( Name = "binary2", IsOptional =  true , HasTag =  true, Tag = 11 , HasDefaultValue =  false )  ]
    
        public TestOCT Binary2
        {
            get { return binary2_; }
            set { binary2_ = value; binary2_present = true;  }
        }
        
                
          
	private string simpleType2_ ;
	
        private bool  simpleType2_present = false ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.PrintableString , IsUCS = false )]
        [ASN1Element ( Name = "simpleType2", IsOptional =  true , HasTag =  true, Tag = 12 , HasDefaultValue =  false )  ]
    
        public string SimpleType2
        {
            get { return simpleType2_; }
            set { simpleType2_ = value; simpleType2_present = true;  }
        }
        
                
          
	private byte[] simpleOctType2_ ;
	
        private bool  simpleOctType2_present = false ;
	[ASN1OctetString( Name = "" )]
    
        [ASN1Element ( Name = "simpleOctType2", IsOptional =  true , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public byte[] SimpleOctType2
        {
            get { return simpleOctType2_; }
            set { simpleOctType2_ = value; simpleOctType2_present = true;  }
        }
        
                
          
	private bool booleanType2_ ;
	
        private bool  booleanType2_present = false ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "booleanType2", IsOptional =  true , HasTag =  true, Tag = 13 , HasDefaultValue =  false )  ]
    
        public bool BooleanType2
        {
            get { return booleanType2_; }
            set { booleanType2_ = value; booleanType2_present = true;  }
        }
        
                
          
	private long intType2_ ;
	
        private bool  intType2_present = false ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "intType2", IsOptional =  true , HasTag =  true, Tag = 19 , HasDefaultValue =  false )  ]
    
        public long IntType2
        {
            get { return intType2_; }
            set { intType2_ = value; intType2_present = true;  }
        }
        
                
          
	private int intBndType2_ ;
	
        private bool  intBndType2_present = false ;
	[ASN1Integer( Name = "" )]
    [ASN1ValueRangeConstraint ( 
		
		Min = 0L, 
		
		Max = 255L 
		
		) ]
	    
        [ASN1Element ( Name = "intBndType2", IsOptional =  true , HasTag =  true, Tag = 14 , HasDefaultValue =  false )  ]
    
        public int IntBndType2
        {
            get { return intBndType2_; }
            set { intBndType2_ = value; intBndType2_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<string> stringArray2_ ;
	
        private bool  stringArray2_present = false ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.PrintableString , IsUCS = false )]
[ASN1SequenceOf( Name = "stringArray2", IsSetOf = false  )]

    
        [ASN1Element ( Name = "stringArray2", IsOptional =  true , HasTag =  true, Tag = 15 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<string> StringArray2
        {
            get { return stringArray2_; }
            set { stringArray2_ = value; stringArray2_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Data> dataArray2_ ;
	
        private bool  dataArray2_present = false ;
	
[ASN1SequenceOf( Name = "dataArray2", IsSetOf = false  )]

    
        [ASN1Element ( Name = "dataArray2", IsOptional =  true , HasTag =  true, Tag = 16 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Data> DataArray2
        {
            get { return dataArray2_; }
            set { dataArray2_ = value; dataArray2_present = true;  }
        }
        
                
          
	private TestPRN plain3_ ;
	
        private bool  plain3_present = false ;
	
        [ASN1Element ( Name = "plain3", IsOptional =  true , HasTag =  true, Tag = 17 , HasDefaultValue =  false )  ]
    
        public TestPRN Plain3
        {
            get { return plain3_; }
            set { plain3_ = value; plain3_present = true;  }
        }
        
                
  
        public bool isUnicodePresent () {
            return this.unicode_present == true;
        }
        
        public bool isBinaryPresent () {
            return this.binary_present == true;
        }
        
        public bool isSimpleTypePresent () {
            return this.simpleType_present == true;
        }
        
        public bool isBooleanTypePresent () {
            return this.booleanType_present == true;
        }
        
        public bool isIntTypePresent () {
            return this.intType_present == true;
        }
        
        public bool isIntBndTypePresent () {
            return this.intBndType_present == true;
        }
        
        public bool isStringArrayPresent () {
            return this.stringArray_present == true;
        }
        
        public bool isDataArrayPresent () {
            return this.dataArray_present == true;
        }
        
        public bool isPlain2Present () {
            return this.plain2_present == true;
        }
        
        public bool isUnicode2Present () {
            return this.unicode2_present == true;
        }
        
        public bool isBinary2Present () {
            return this.binary2_present == true;
        }
        
        public bool isSimpleType2Present () {
            return this.simpleType2_present == true;
        }
        
        public bool isSimpleOctType2Present () {
            return this.simpleOctType2_present == true;
        }
        
        public bool isBooleanType2Present () {
            return this.booleanType2_present == true;
        }
        
        public bool isIntType2Present () {
            return this.intType2_present == true;
        }
        
        public bool isIntBndType2Present () {
            return this.intBndType2_present == true;
        }
        
        public bool isStringArray2Present () {
            return this.stringArray2_present == true;
        }
        
        public bool isDataArray2Present () {
            return this.dataArray2_present == true;
        }
        
        public bool isPlain3Present () {
            return this.plain3_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DataSeqMO));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
